  @startuml
  ' ---------- SETUP ----------------
  ' strict uml style and hide footboxes
  skinparam style strictuml
  hide footbox
  ' for anchors and duration this may be required (uncomment)
  ' !pragma teoz true

  ' ---------- Declaring participants
  ' participant Participant as Foo
  
  actor Admin
  box "MDO-RC" #LightBlue
  'boundary "UI" as UI
  'control "UI Engine" as UIE
  actor "Remote Client \nBack-End" as RC
  endbox
  box "MDO-RS" #f9db8f
  actor "Remote Server" as RS
  endbox
  box "MDO-LS" #aabbcc
  actor "Local System" as LS
  endbox
  ' entity      Entity      as Foo4
  ' database    Database    as Foo5
  ' collections Collections as Foo6
  ' queue       Queue       as Foo7

  ' async message
  '== Application start == 
  'Test Operation (if Admin)
    alt Test Normal Mode
     activate Admin
     Admin ->> RC --++ : video/audio/fragrance\nadd/delete/play/stop\n<station>
     'deactivate Admin
     'activate RC
     RC ->> RS :  video/audio/fragrance\nadd/delete/play/stop<station>
     deactivate RC
     activate RS
     activate LS
     RS ->> LS : v/a/f a/d/p/s \n <fname><option>
     deactivate RS
     ref over Admin, RC, RS, LS: command feedback
     'deactivate LS
    else  CameraTesting
     'alt On/Off Testing
     ref over Admin, RC, RS, LS: Test Camera
     ' activate Admin
     ' Admin ->> RC --++ : enable/disable camera
     ' RC ->> RS --++ : camera(enable, station)
     ' activate LS
     ' RS ->> LS -- : c <enable>
     ' deactivate LS      
     'else Facial Detection Testing
     ' ref over Admin, RC, RS, LS: Test Facial Detection
     ' activate Admin
     ' Admin ->> RC --++ : apply face detection
     ' RC ->> RS --++ : facial_rec()
     ' activate LS
     ' RS ->> LS -- : f
     ' deactivate LS
     'else Image Filter Testing
     ' ref over Admin, RC, RS, LS: Test Image Filter
      'activate Admin
      'Admin ->> RC --++: select/apply/reject\nfilter
      'RC ->> RS --++: select/apply/reject\n<filter> <station>
      'activate LS
      'RS ->> LS -- : i s/a/r <name> <filter>
      'deactivate LS
     'else Take Picture Testing
     ' ref over Admin, RC, RS, LS: Test Take Picture
      'activate Admin
      'Admin ->> RC --++ : Take Picture
      'RC ->> RS --++ : take_pic(station, filename)
      'activate LS
      'RS ->> LS -- : p <fname>
      'deactivate LS
     'else Create GIF Testing
      'ref over Admin, RC, RS, LS: Test Create GIF
      'activate Admin
      'Admin ->> RC --++ : Creat GIF
      'RC ->> RS --++ : create_gif(station, filename)
      'activate LS
      'RS ->> LS -- : g <fname>
      'deactivate LS 
     'end
    else Sharing Mode Testing
     ref over Admin, RC, RS, LS: Test Sharing Mode
     'activate Admin
     'Admin ->> RC --++ : Share Post
     'RC ->> RS --++ : share(station, SM_opt,\n msg, attachement)
     'RS ->> LS --++ : s <SM_opt> <msg>\n <attachement>  
     'LS -> LS : share  
   end

Group command feedback
'code here
activate LS
LS ->> RS --++: send_feedback(msg, status)
RS ->> RC --++ : send_feedback(msg, status)
RC ->> Admin --++ : show_feedback(msg, status)
end 
   
' =========================== ZE das couves ==============================='
'  LS -> UIE: show Image Filter view
'  UIE -> User: visual feedback
'  ref over User, GRE, UIE, LS: Image Filter
' -------
'    else Take Pic
'    LS -> UIE: show Pic view
'    UIE -> User: visual feedback
'    ref over User, GRE, UIE, LS: Picture mode
' -------
'    else Create GIF
'    LS -> UIE: show GIF view
'    UIE -> User: visual feedback
'    ref over User, GRE, UIE, LS: GIF mode
'    '' LS -> LS: process gesture \ncallback
'    '' LS -> UIE: provide output
'    '' UIE -> User: visual feedback
'    ' end alt
'    end 
' end par
'  end
		

  @enduml
