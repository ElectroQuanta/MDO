  @startuml
  ' ---------- SETUP ----------------
  ' strict uml style and hide footboxes
  skinparam style strictuml
  hide footbox
  ' for anchors and duration this may be required (uncomment)
  ' !pragma teoz true

  ' ---------- Declaring participants
  ' participant Participant as Foo
  
  actor User
  box "MDO-RC" #LightBlue
  boundary "UI" as UI
  control "UI Engine" as UIE
  actor "Remote Client \nBack-End" as RC
  endbox
  box "MDO-RS" #f9db8f
  actor "Remote Server" as RS
  database "Stations DB" as StationDB
  endbox
  ' entity      Entity      as Foo4
  ' database    Database    as Foo5
  ' collections Collections as Foo6
  ' queue       Queue       as Foo7

  ' async message
  ' == Application start ==
  ' activate User
  ' User ->> UI: starts app 
  ' deactivate User
  ' activate UI
  ' UI -> User: Show Login view
  ' deactivate UI
''
  == Admin ==
  activate StationDB
  StationDB -> RS : Stations Data
  deactivate StationDB
  activate RS
  RS ->> RC : Sends data
  deactivate RS
  activate RC
  RC -> UIE : Stations Info
  activate UIE
  UIE -> UI : stations_view
  deactivate UIE
  activate UI
  UI -> User : show stations view
  deactivate UI
  alt statistics
   activate User
   User ->> UI : Press statistics
   deactivate User
   activate UI
   UI -> UIE : statistics_btn_pressed
   deactivate UI
   activate UIE
   UIE -> RC : get_statistics(station)
   deactivate UIE
   RC ->> RS : get_statistics(station)
   activate RS
   RS -> StationDB : get_statistics(station)
   deactivate RS
   activate StationDB
   StationDB -> RS : Send station statistics
   deactivate StationDB
   activate RS
   RS ->> RC : Send station statistics
   deactivate RS
   RC -> UIE : Station Statistics
   activate UIE
   UIE -> UI : statistics view
   deactivate UIE
   activate UI
   UI -> User : show statistics View
   deactivate UI
   activate User
  else Users
   ref over User, UI, UIE, RC, RS, StationDB : Users
  ' User ->> UI : Press Users
  ' deactivate User
  ' activate UI
  ' UI -> UIE : user_btn_pressed
  ' deactivate UI
  ' activate UIE
  ' UIE -> RC : get_users()
  ' deactivate UIE
  ' RC ->> RS : get_users()
  ' activate RS
  ' RS -> UserDB : get_users()
  ' deactivate RS
  ' activate UserDB
  ' UserDB -> RS : Send users info
  ' deactivate UserDB
  ' activate RS
  ' RS ->> RC : Send users info
  ' deactivate RS
  ' RC -> UIE : Users info
  ' activate UIE
  ' UIE -> UI : users view
  ' deactivate UIE
  ' activate UI
  ' UI -> User : show users view
  ' deactivate UI
  ' activate User
  ' User ->> UI : Make changes
  ' deactivate User
  ' activate UI
  ' UI -> UIE : save_changes_btn_pressed
  ' deactivate UI
  ' activate UIE
  ' UIE -> RC : save(user)
  ' deactivate UIE
  ' RC ->> RS : save(user)
  ' activate RS
  ' RS -> UserDB : save(user)
  ' deactivate RS
  ' activate UserDB
  ' UserDB -> UserDB : Update DB
  ' deactivate UserDB
   
  else Ads To Activate
   ref over User, UI, UIE, RC, RS, StationDB : Ads To Activate
   'User ->> UI : Press Ads To Activate
   'deactivate User
   'activate UI
   'UI -> UIE : ads_to_act_btn_pressed
   'deactivate UI
   'activate UIE
   'UIE -> RC : get_ads()
   'deactivate UIE
   'RC ->> RS : get_ads()
   'activate RS
   'RS -> UserDB : get_ads()
   'deactivate RS
   'activate UserDB
   'UserDB -> RS : Send ads to activate info
   'deactivate UserDB
   'activate RS
   'RS ->> RC : Send ads to activate info
   'deactivate RS
   'RC -> UIE : Ads To Activate info
   'activate UIE
   'UIE -> UI : Ads To Activate view
   'deactivate UIE
   'activate UI
   'UI -> User : show Ads To Activate view
   'deactivate UI
   'activate User
   'deactivate User  
  else Logout
ref over User, UI, UIE, RC, RS, StationDB : Logout 
  end
''
  deactivate User
  activate UI
  deactivate UI
  activate UIE
@enduml
